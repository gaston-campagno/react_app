name: Terraform CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    name: Run Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform  # Se especifica la carpeta de Terraform

      - name: Check for existing SSH Key
        id: check_key
        run: |
          if ! aws ec2 describe-key-pairs --key-names my-ssh-key --query 'KeyPairs[*].KeyName' --output text; then
            echo "Key not found, creating new key."
            echo "key_found=false" >> $GITHUB_ENV
          else
            echo "Key found."
            echo "key_found=true" >> $GITHUB_ENV
          fi

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
        
      - name: Update key status
        run: |
          echo "create_key = false" > ./terraform/key_status.tfvars
        working-directory: ./terraform

      - name: Run Terraform and generate outputs
        run: |
          echo "Generating Terraform outputs..."
          terraform output -json > outputs.json
          echo "Verifying outputs.json existence..."
          if [ -f outputs.json ]; then
            echo "File outputs.json created successfully."
          else
            echo "Error: outputs.json not created."
            exit 1
          fi
        working-directory: ./terraform

      - name: List files after terraform output
        run: ls -la ./terraform

      - name: Verify Terraform Outputs
        run: terraform output
        working-directory: ./terraform

      - name: Debug outputs.json
        run: cat outputs.json
        
      - name: Test jq parsing
        run: |
          jq -r '.ssh_private_key.value' < outputs.json


      - name: Set Secrets (EC2 Instance ID and SSH Keys)
        run: |
          if [ -f outputs.json ]; then
              # Debug: Verificar el contenido de outputs.json
              echo "Debugging outputs.json:"
              cat outputs.json
              
              # Extraer el EC2 instance ID
              INSTANCE_ID=$(jq -r '.ec2_instance_id.value' < outputs.json)
              echo "Setting EC2 instance ID as a secret..."
              gh secret set EC2_INSTANCE_ID --body "$INSTANCE_ID"
              
              # Verificar si existe la clave SSH y agregarla al entorno
              if jq -e '.ssh_private_key.value' < outputs.json > /dev/null; then
                  SSH_PRIVATE_KEY=$(jq -r .ssh_private_key.value < outputs.json)
                  echo "SSH_PRIVATE_KEY=$(jq -r .ssh_private_key.value < outputs.json)" >> $GITHUB_ENV
                  echo "Setting SSH private key secret..."
                  gh secret set SSH_PRIVATE_KEY --body "$SSH_PRIVATE_KEY"
              else
                  echo "No SSH private key found in outputs.json."
              fi
          else
              echo "Error: outputs.json not found."
              exit 1
          fi
        working-directory: ./terraform

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

